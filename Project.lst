Microsoft (R) Macro Assembler Version 14.34.31937.0	    03/05/23 16:00:52
Assignment2JoshNegreanu.asm				     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
Assignment2JoshNegreanu.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096; SS register
				ExitProcess proto, dwExitCode:dword

				; Author(s) : Joshua Negreanu and Warner Greenbaum
				; Course / Project ID : CS 271 Assignment 4		Date : 2 / 28 / 23
				; Description: This program asks the user for the number of composite numbers to display and displays that amount in order

				;------------------------------------------------------------;

				; min and max bounds of the user input(list size)
 = 0000000A			MIN = 10
 = 000000C8			MAX = 200

				; lower and upper limits of the numbers to be randomly generated
 = 00000064			LO  = 100
 = 000003E7			HI = 999

 00000000			.data; DS register;
				    ; the string for the program name
 00000000 53 6F 72 74 69	    pname           BYTE    "Sorting Random Numbers (Assignment 5) written by Josh Negreanu.", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   4E 75 6D 62 65
	   72 73 20 28 41
	   73 73 69 67 6E
	   6D 65 6E 74 20
	   35 29 20 77 72
	   69 74 74 65 6E
	   20 62 79 20 4A
	   6F 73 68 20 4E
	   65 67 72 65 61
	   6E 75 2E 00

				    ; program info string
 00000040 54 68 69 73 20	    info            BYTE    "This program generates random numbers in the range [100 .. 999], displays the original list, sorts the list, and calculates the median value.Finally, it displays the list sorted in descending order.", 0
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 20 39
	   39 39 5D 2C 20
	   64 69 73 70 6C
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2E 46 69 6E 61
	   6C 6C 79 2C 20
	   69 74 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6C 69 73 74
	   20 73 6F 72 74
	   65 64 20 69 6E
	   20 64 65 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2E 00

				    ; prompt for the user to input the length of the randomly generated list
 00000107 48 6F 77 20 6D	    prompt1         BYTE    "How many numbers should be generated? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 20
	   32 30 30 5D 3A
	   20 00
 0000013B 00000000		    list_size       DWORD   ?

				    ; error message if the user inputs a number outside the range
 0000013F 4F 75 74 20 6F	    error           BYTE    "Out of range. Try again.", 0
	   66 20 72 61 6E
	   67 65 2E 20 54
	   72 79 20 61 67
	   61 69 6E 2E 00

				    ; list variable
 00000158  000000C8 [		    list    DWORD   MAX   DUP(?)
	    00000000
	   ]

				    ; spacer string
 00000478 20 20 20 00		    spacer          BYTE    "   ", 0

				    ; string prompts for displaying the unsorted list, median, and sorted list
 0000047C 54 68 65 20 75	    prompt2         BYTE    "The unsorted random numbers:", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 00
 00000499 54 68 65 20 6D	    prompt3         BYTE    "The median is: ", 0
	   65 64 69 61 6E
	   20 69 73 3A 20
	   00
 000004A9 54 68 65 20 73	    prompt4         BYTE    "The sorted list:", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 00

				    ; certification string
 000004BA 52 65 73 75 6C	    certify         BYTE    "Results certified by Josh Negreanu.", 0
	   74 73 20 63 65
	   72 74 69 66 69
	   65 64 20 62 79
	   20 4A 6F 73 68
	   20 4E 65 67 72
	   65 61 6E 75 2E
	   00

				    ; custom goodbye
 000004DE 47 6F 6F 64 62	    goodbye         BYTE    "Goodbye", 0
	   79 65 00

				;------------------------------------------------------------;

 00000000			.code; CS register

 00000000			introduction proc
 00000000  52			    push EDX

 00000001  BA 00000000 R	    mov EDX, OFFSET pname
 00000006  E8 00000000 E	    call WriteString
 0000000B  E8 00000000 E	    call Crlf

 00000010  BA 00000040 R	    mov EDX, OFFSET info
 00000015  E8 00000000 E	    call WriteSTring
 0000001A  E8 00000000 E	    call Crlf

 0000001F  5A			    pop EDX
 00000020  C3			    ret
 00000021			introduction endp

 00000021			getData proc
 00000021  50			    push EAX
 00000022  52			    push EDX

 00000023			    prompt_user:
 00000023  BA 00000107 R	    mov EDX, OFFSET prompt1
 00000028  E8 00000000 E	    call WriteString
 0000002D  E8 00000000 E	    call ReadInt

 00000032  83 F8 0A		    cmp EAX, MIN
 00000035  7C 09		    jl error_input

 00000037  3D 000000C8		    cmp EAX, MAX
 0000003C  7F 02		    jg error_input

 0000003E  EB 11		    jmp no_error

 00000040			    error_input:
 00000040  BA 0000013F R	    mov EDX, OFFSET error
 00000045  E8 00000000 E	    call WriteString
 0000004A  E8 00000000 E	    call Crlf
 0000004F  EB D2		    jmp prompt_user

 00000051			    no_error:
 00000051  A3 0000013B R	    mov list_size, EAX
				    
 00000056  5A			    pop EDX
 00000057  58			    pop EAX
 00000058  C3			    ret
 00000059			getData endp

 00000059			fillArray proc
 00000059  55			    push EBP
 0000005A  57			    push EDI
 0000005B  51			    push ECX
 0000005C  50			    push EAX

 0000005D  8B EC		    mov EBP, ESP
 0000005F  8B 7D 18		    mov EDI, [EBP + 24]
 00000062  8B 4D 14		    mov ECX, [EBP + 20]

 00000065			    loop_top:
 00000065  B8 000003E7		        mov EAX, HI
 0000006A  83 E8 64		        sub EAX, LO
 0000006D  83 C0 01		        add EAX, 1
 00000070  E8 00000000 E	        call RandomRange
 00000075  83 C0 64		        add EAX, LO

 00000078  89 07		        mov [EDI], EAX
 0000007A  83 C7 04		        add EDI, 4
 0000007D  E2 E6		    loop loop_top

 0000007F  58			    pop EAX
 00000080  59			    pop ECX
 00000081  5F			    pop EDI
 00000082  5D			    pop EBP
 00000083  C2 0008		    ret 8
 00000086			fillArray endp

 00000086			displayList proc
 00000086  55			    push EBP
 00000087  57			    push EDI
 00000088  51			    push ECX
 00000089  50			    push EAX

 0000008A  8B EC		    mov EBP, ESP
 0000008C  8B 7D 18		    mov EDI, [EBP + 24]
 0000008F  8B 4D 14		    mov ECX, [EBP + 20]

 00000092			    loop_top:
 00000092  8B 07		        mov EAX, [EDI]
 00000094  E8 00000000 E	        call WriteDec
 00000099  E8 00000000 E	        call Crlf
 0000009E  83 C7 04		        add EDI, 4
 000000A1  E2 EF		    loop loop_top

 000000A3  58			    pop EAX
 000000A4  59			    pop ECX
 000000A5  5F			    pop EDI
 000000A6  5D			    pop EBP
 000000A7  C2 0008		    ret 8
 000000AA			displayList endp

 000000AA			displayMedian proc
 000000AA  55			    push EBP
 000000AB  57			    push EDI
 000000AC  52			    push EDX
 000000AD  51			    push ECX
 000000AE  50			    push EAX

 000000AF  8B EC		    mov EBP, ESP
 000000B1  8B 7D 1C		    mov EDI, [EBP + 28]
 000000B4  8B 45 18		    mov EAX, [EBP + 24]

 000000B7  BA 00000000		    mov EDX, 0
 000000BC  B9 00000002		    mov ECX, 2
 000000C1  F7 F1		    div ECX

 000000C3  83 FA 00		    cmp EDX, 0
 000000C6  74 20		    je avg_median

 000000C8  B9 00000004		    mov ECX, 4
 000000CD  F7 E1		    mul ECX
 000000CF  8B 04 07		    mov EAX, [EDI + EAX]
 000000D2  BA 00000499 R	    mov EDX, OFFSET prompt3
 000000D7  E8 00000000 E	    call WriteString
 000000DC  E8 00000000 E	    call WriteDec
 000000E1  E8 00000000 E	    call Crlf
 000000E6  EB 49		    jmp median

 000000E8			    avg_median:
 000000E8  8B D8		    mov EBX, EAX
 000000EA  83 EB 01		    sub EBX, 1

 000000ED  B9 00000004		    mov ECX, 4
 000000F2  F7 E1		    mul ECX
 000000F4  8B C8		    mov ECX, EAX
 000000F6  8B C3		    mov EAX, EBX
 000000F8  8B D9		    mov EBX, ECX
 000000FA  B9 00000004		    mov ECX, 4
 000000FF  F7 E1		    mul ECX

 00000101  8B 04 07		    mov EAX, [EDI + EAX]
 00000104  8B 1C 1F		    mov EBX, [EDI + EBX]
 00000107  03 C3		    add EAX, EBX
 00000109  B9 00000002		    mov ECX, 2
 0000010E  BA 00000000		    mov EDX, 0
 00000113  F7 F1		    div ECX

 00000115  83 FA 00		    cmp EDX, 0
 00000118  74 03		    je no_add_one

 0000011A  83 C0 01		    add EAX, 1

 0000011D			    no_add_one:

 0000011D  BA 00000499 R	    mov EDX, OFFSET prompt3
 00000122  E8 00000000 E	    call WriteString
 00000127  E8 00000000 E	    call WriteDec
 0000012C  E8 00000000 E	    call Crlf

 00000131			    median:

 00000131  58			    pop EAX
 00000132  59			    pop ECX
 00000133  5A			    pop EDX
 00000134  5F			    pop EDI
 00000135  5D			    pop EBP
 00000136  C2 0008		    ret 8
 00000139			displayMedian endp

 00000139			sortList proc
 00000139  55			    push EBP
 0000013A  57			    push EDI
 0000013B  52			    push EDX
 0000013C  51			    push ECX
 0000013D  53			    push EBX
 0000013E  50			    push EAX

 0000013F  8B EC		    mov EBP, ESP
 00000141  8B 7D 20		    mov EDI, [EBP + 32]
 00000144  8B 55 1C		    mov EDX, [EBP + 28]

 00000147  B8 FFFFFFFF		    mov EAX, -1

 0000014C			    selection_sort_top:
 0000014C  83 C0 01		        add EAX, 1

 0000014F  8B D8		        mov EBX, EAX
 00000151  8B C8		        mov ECX, EAX

 00000153			        inner_loop_top:
 00000153  83 C1 01		            add ECX, 1
				            
 00000156  50			            push EAX

 00000157  8B C3		            mov EAX, EBX
 00000159  52			            push EDX
 0000015A  BA 00000004		            mov EDX, 4
 0000015F  F7 E2		            mul EDX
 00000161  5A			            pop EDX
 00000162  8B 04 07		            mov EAX, [EDI + EAX]
 00000165  53			            push EBX
 00000166  8B D8		            mov EBX, EAX

 00000168  8B C1		            mov EAX, ECX
 0000016A  52			            push EDX
 0000016B  BA 00000004		            mov EDX, 4
 00000170  F7 E2		            mul EDX
 00000172  5A			            pop EDX
 00000173  8B 04 07		            mov EAX, [EDI + EAX]
 00000176  51			            push ECX
 00000177  8B C8		            mov ECX, EAX
				            
 00000179  3B D9		            cmp EBX, ECX
 0000017B  7F 06		            jg no_update

 0000017D  59			            pop ECX
 0000017E  5B			            pop EBX
 0000017F  8B D9		            mov EBX, ECX

 00000181  EB 02		            jmp updated

 00000183			            no_update:

 00000183  59			            pop ECX
 00000184  5B			            pop EBX

 00000185			            updated:
 00000185  58			            pop EAX

 00000186  3B CA		        cmp ECX, EDX
 00000188  7C C9		        jl inner_loop_top

				        ;EXCHANGE (IDK HOW IN THE WORLD TO DO THIS)

 0000018A  55			        push EBP

 0000018B  8B D0		        mov EDX, EAX
 0000018D  52			        push EDX
 0000018E  BA 00000004		        mov EDX, 4
 00000193  F7 E2		        mul EDX
 00000195  5A			        pop EDX
 00000196  8B 0C 07		        mov ECX, [EDI + EAX]
 00000199  8B EF		        mov EBP, EDI
 0000019B  03 E8		        add EBP, EAX
 0000019D  8B C2		        mov EAX, EDX

 0000019F  50			        push EAX
 000001A0  8B C3		        mov EAX, EBX
 000001A2  53			        push EBX
 000001A3  52			        push EDX
 000001A4  BA 00000004		        mov EDX, 4
 000001A9  F7 E2		        mul EDX
 000001AB  8B 14 07		        mov EDX, [EDI + EAX]
 000001AE  8B DF		        mov EBX, EDI
 000001B0  03 D8		        add EBX, EAX

 000001B2  89 55 00		        mov [EBP], EDX
 000001B5  89 0B		        mov [EBX], ECX

 000001B7  5A			        pop EDX
 000001B8  5B			        pop EBX
 000001B9  58			        pop EAX

 000001BA  5D			        pop EBP

 000001BB  3B C2		    cmp EAX, EDX
 000001BD  7E 8D		    jle selection_sort_top

 000001BF  58			    pop EAX
 000001C0  5B			    pop EBX
 000001C1  59			    pop ECX
 000001C2  5A			    pop EDX
 000001C3  5F			    pop EDI
 000001C4  5D			    pop EBP
 000001C5  C2 0008		    ret 8
 000001C8			sortList endp

				;------------------------------------------------------------;

 000001C8			main proc
				    
 000001C8  E8 00000000 E	    call Randomize
				    
 000001CD  E8 FFFFFE2E		    call introduction
 000001D2  E8 FFFFFE4A		    call getData

 000001D7  68 00000158 R	    push OFFSET list
 000001DC  FF 35 0000013B R	    push list_size
 000001E2  E8 FFFFFE72		    call fillArray

 000001E7  BA 0000047C R	    mov EDX, OFFSET prompt2
 000001EC  E8 00000000 E	    call WriteString
 000001F1  E8 00000000 E	    call Crlf
 000001F6  68 00000158 R	    push OFFSET list
 000001FB  FF 35 0000013B R	    push list_size
 00000201  E8 FFFFFE80		    call displayList

 00000206  68 00000158 R	    push OFFSET list
 0000020B  FF 35 0000013B R	    push list_size
 00000211  E8 FFFFFE94		    call displayMedian

 00000216  68 00000158 R	    push OFFSET list
 0000021B  FF 35 0000013B R	    push list_size
 00000221  E8 FFFFFF13		    call sortList

 00000226  BA 000004A9 R	    mov EDX, OFFSET prompt4
 0000022B  E8 00000000 E	    call WriteString
 00000230  E8 00000000 E	    call Crlf
 00000235  68 00000158 R	    push OFFSET list
 0000023A  FF 35 0000013B R	    push list_size
 00000240  E8 FFFFFE41		    call displayList

				invoke ExitProcess, 0
 00000245  6A 00	   *	    push   +000000000h
 00000247  E8 00000000 E   *	    call   ExitProcess
 0000024C			main endp
				end main
Microsoft (R) Macro Assembler Version 14.34.31937.0	    03/05/23 16:00:52
Assignment2JoshNegreanu.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004E6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000024C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 00000086 _TEXT	Length= 00000024 Public STDCALL
  loop_top . . . . . . . . . . .	L Near	 00000092 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000000AA _TEXT	Length= 0000008F Public STDCALL
  avg_median . . . . . . . . . .	L Near	 000000E8 _TEXT	
  no_add_one . . . . . . . . . .	L Near	 0000011D _TEXT	
  median . . . . . . . . . . . .	L Near	 00000131 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 00000059 _TEXT	Length= 0000002D Public STDCALL
  loop_top . . . . . . . . . . .	L Near	 00000065 _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000038 Public STDCALL
  prompt_user  . . . . . . . . .	L Near	 00000023 _TEXT	
  error_input  . . . . . . . . .	L Near	 00000040 _TEXT	
  no_error . . . . . . . . . . .	L Near	 00000051 _TEXT	
introduction . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 000001C8 _TEXT	Length= 00000084 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000139 _TEXT	Length= 0000008F Public STDCALL
  selection_sort_top . . . . . .	L Near	 0000014C _TEXT	
  inner_loop_top . . . . . . . .	L Near	 00000153 _TEXT	
  no_update  . . . . . . . . . .	L Near	 00000183 _TEXT	
  updated  . . . . . . . . . . .	L Near	 00000185 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
certify  . . . . . . . . . . . .	Byte	 000004BA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 0000013F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000004DE _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
info . . . . . . . . . . . . . .	Byte	 00000040 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_size  . . . . . . . . . . .	DWord	 0000013B _DATA	
list . . . . . . . . . . . . . .	DWord	 00000158 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
pname  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000107 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000047C _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000499 _DATA	
prompt4  . . . . . . . . . . . .	Byte	 000004A9 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacer . . . . . . . . . . . . .	Byte	 00000478 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
